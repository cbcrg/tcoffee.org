  <html>
    <head>
      <title>More About GSTs</title>
    </head>
    <body>
      <h1>
	<center>
	  Multiple Sequence and Structure Alignment of Glutathione
	  S-transferases using <tt>t_coffee</tt>
	</center>
      </h1>
      <center>
	<TABLE NOBORDER WIDTH=490>
	  <TR>
	      <center>
	      <IMG SRC='1pmt_1bx9.gif' ALIGN=CENTER>
	      </center>
	    </TD>
	  </TR>
	  <TR>
	    <TD>
	      <b>
		Example of two glutathione S-transferases. The two
		most conserved parts among various GSTs were
		highlighted.
	      </b>
	    </TD>
	  </TR>
	</TABLE>
      </center>
      <OL>
	<LI>
	  <P>
	    Glutathione S-transferases (GSTs) constitute a large
	    family of proteins. Historically, GSTs were divided into
	    several classes based on biochemical and sequence
	    considerations. It is admitted that all GSTs have a
	    conserved 3D-structure, and indeed, more than twenty
	    different GSTs from various classes were crystallized,
	    confirming this assertion.
	  </P>
	  <P>
	    The table below presents a selection of GSTs for which
	    X-ray structures are available. A nickname was given to most
	    of these sequences to simplify their manipulation.
	  </P>
	  <P>
	    <TABLE border>
	      <TR>
		<TH>nickname</TH>
		<TH>PDB-ID</TH><TH>SwissProt-ID</TH>
		<TH>
		  Description
		</TH>
	      </TR>
	      <TR><TD>alpha1</TD><TD>1guh</TD><TD>GTA1_HUMAN</TD>
		<TD>
		  Class <b>alpha</b>, with S-benzyl-glutathione as ligand.
		</TD>
	      </TR>
	      <TR><TD>alpha2</TD><TD>1gul</TD><TD>GTA4_HUMAN</TD>
		<TD>
		  Class <b>alpha</b> with iodobenzyl glutathione as ligand.
		</TD>
	      </TR>
	      <TR><TD>alpha3</TD><TD>1guk</TD><TD>GTA4_MOUSE</TD>
		<TD>
		  Class <b>alpha</b> with iodobenzyl glutathione as ligand.
		</TD>
	      </TR>
	      <TR><TD>alpha4</TD><TD>1fhe</TD><TD>GT27_FASHE</TD>
		<TD>
		  Class <b>alpha</b>, ligand: glutathione
		</TD>
	      </TR>
	      <TR><TD>alpha5</TD><TD>1gta</TD><TD>GT26_SCHJA</TD>
		<TD>
		  Class <b>alpha</b>, ligand-free.
		  ligand: none
		</TD>
	      </TR>
	      
	      <TR><TD>beta1</TD><TD>1a0f</TD><TD>GT_ECOLI</TD>
		<TD>
		  Class <b>beta</b>, with glutathionesulfonic acid as ligand.
		</TD>
	      </TR>
	      <TR><TD>beta2</TD><TD>2pmt</TD><TD>GT_PROMI</TD>
		<TD>
		  Class <b>beta</b>, with glutathion as ligand.
		</TD>
	      </TR>
	      <TR><TD>phi1</TD><TD>1axd</TD><TD>GTH1_MAIZE</TD>
		<TD>
		  Class <b>phi</b>, ligand: actoylglutathione 
		</TD>
	      </TR>
	      <TR><TD>phi2</TD><TD>1gnw</TD><TD>GTH4_ARATH</TD>
		<TD>
		  Class <b>phi</b> with S-hexylglutathione as ligand.
		</TD>
	      </TR>
	      
	      <TR><TD>mu1</TD><TD>1gtu</TD><TD>GTM1_HUMAN</TD>
		<TD>
		  Class <b>mu</b>, ligand-free.
		</TD>
	      </TR>
	      <TR><TD>mu2</TD><TD>2gtu</TD><TD>GTM2_HUMAN</TD>
		<TD>
		  Class <b>mu</b>, ligand free.
		</TD>
	      </TR>
	      <TR><TD>mu3</TD><TD>2gst</TD><TD>GTM1_RAT</TD>
		<TD>
		  Class <b>mu</b> ligand: GPS + Sulphate
		</TD>
	      </TR>
	      <TR><TD>mu4</TD><TD>1gsu</TD><TD>GTM2_CHICK</TD>
		<TD>
		  Class <b>mu</b> with S-hexylglutathione as ligand.
		</TD>
	      </TR>
	      
	      <TR><TD>omega</TD><TD>1eem</TD><TD>tn:AAF73376</TD>
		<TD>
		  <B>Omega</B>,
		  ligand: glutathione + 2 sulfate ions
		</TD>
	      </TR>
	      
	      <TR><TD>pi1</TD><TD>1glp</TD><TD>GTP1_MOUSE</TD>
		<TD>
		  Class <b>pi</b>, ligand: glutathione sulfonic acid
		</TD>
	      </TR>
	      <TR><TD>pi2</TD><TD>2gsr</TD><TD>GTP_PIG</TD>
		<TD>
		  Class <b>pi</b> with ligand: ILG-OCS-GLY	
		</TD>
	      </TR>
	      <TR><TD>pi3</TD><TD>2gss</TD><TD>GTP_HUMAN</TD>
		<TD>
		  Class <b>pi</b> with ethacrynic acid as ligand.
		</TD>
	      </TR>
	      
	      <TR><TD>sigma</TD><TD>2gsq</TD><TD>GTS_OMMSL</TD>
		<TD>
		  Class <b>sigma</b> with s-(3-iodobenzyl)glutathione as
		  ligand.
		</TD>
	      </TR>
	      <TR><TD>theta</TD><TD>1ljr</TD><TD>GTT2_HUMAN</TD>
		<TD>
		  Class <b>theta</b>, with glutathione as ligand.
		</TD>
	      </TR>
	      
	      <TR><TD>zeta</TD><TD>1e6b </TD><TD>Q9ZVQ3</TD>
		<TD>
		  Class <B>Zeta</B>.
		</TD>
	      </TR>
	      </TR>
	      <TR><TD>ure2</TD><TD>1hqo</TD><TD>URE2_YEAST</TD>
		<TD>
		  Nitrogen regulation fragment of the yeast prion
		  protein ure2p.
		</TD>
	      </TR>
	      <TR><TD>clic</TD><TD>1k0m</TD><TD>CLI1_HUMAN</TD>
		<TD>
		 Soluble form of the intracellular chloride ion channel Clic1.
		</TD>
	      </TR>
	    </TABLE>
	  </P>
	</LI>
	<LI>
	  <P>
	    The <tt>t_coffee</tt> documentation is available online
	    from the <A
	    href='http://igs-server.cnrs-mrs.fr/~cnotred/Projects_home_page/t_coffee_home_page.html'
	    target=t_coffee_doc>t_coffee home page</A>. Please refer
	    to this documentation for explanations about the many
	    switches employed in the exercises below.
	  </P>
	</LI>
	<LI>
	  <P>
	    We will restrict our attention to a selection of GSTs
	    that encompass the diversity of the sequences for which a
	    structure is available. Note that many GSTs, especially
	    the bacterial ones, belong to other new classes yet to
	    be described.
	  </P>
	  <P>
	    Let us define our test set with the help of an environment
	    variable
	  </P>
	  <PRE>
export TEST="$TUTOR/gst2/alpha1.pdb $TUTOR/gst2/beta1.pdb $TUTOR/gst2/phi1.pdb \
             $TUTOR/gst2/mu1.pdb $TUTOR/gst2/omega.pdb $TUTOR/gst2/pi1.pdb \
             $TUTOR/gst2/sigma.pdb $TUTOR/gst2/theta.pdb $TUTOR/gst2/ure2.pdb\
             $TUTOR/gst2/clic.pdb"
	  </PRE>
	  <P>
	    Note that these "pdb" files are uncomplete: they only
	    contain the alpha atoms of a selected single chain. They
	    were produced with the Perl script
	    <tt>extract_from_pdb</tt> which is distributed with
	    <tt>t_coffee</tt>.  </P>
	</LI>
	<LI>
	  <P>
	    First, we want to produce three libraries for
	    <tt>t_coffee</tt>. We'll use these libraries to build
	    multiple sequence alignment in the next exercises. This
	    strategy is intended to demonstrate the versatility of
	    <tt>t_coffee</tt> and also save some CPU time. Note that
	    <tt>t_coffee</tt> extracts the amino acid sequences
	    directly from the pdb file, but one could also have
	    supplied these sequences in FASTA format, where the
	    structural information was irrelevant. Let us build the
	    libraries:
	  </P>
	  <UL>	  
	    <LI>
	      <P>
		The method <b>fast_pair</b> produces a global
		alignment for every possible pair of sequences. The
		FASTA heuristic is used (other global methods are
		available).
	      </P>
	      <PRE>
t_coffee \
   -in $TEST Mfast_pair \
   -out_lib gst_fast_pair.lib \
   -quiet stdout \
   -convert
	      </PRE>
	      <P>
		The library was saved in the file
		<tt>gst_fast_pair.lib</tt>. Have a look at the content
		of this file.
	      </P>
	    </LI>
	    <LI>
	      <P>
		The method <b>lalign_id_pair</b> computes the ten best
		local alignments for every pair of sequences using the
		Smith-Waterman algorithm. This is more CPU expensive
		than fast_pair.
	      </P>
	      <PRE>
t_coffee \
   -in $TEST Mlalign_id_pair \
   -out_lib gst_lalign_id_pair.lib \
   -quiet stdout \
   -convert
	      </PRE>
	      <P>
		Have a look at the <tt>gst_lalign_id_pair.lib</tt>
		file. Can you see how its content differs from that of
		the <tt>gst_fast_pair.lib</tt> file.
	      </P>
	    </LI>
	    <LI>
	      <P>
		The method <b>sap_pair</b> calls the external program
		<tt>SAP</tt> which performs a structure-based
		alignment for every pair of structures. Only the
		coordinates of the alpha atoms are taken into account
		(the type of residue is ignored). The structures are
		allowed to have some flexibility during the alignment
		process. Because this method is pretty CPU expensive,
		the library <tt>gst_sap_pair.lib</tt> can be
		simply copied from <tt>$TUTOR/gst2</tt>.
	      </P>
	      <PRE>
t_coffee \
   -in $TEST Msap_pair \
   -out_lib gst_sap_pair.lib \
   -quiet stdout \
   -convert
	      </PRE>
	    </LI>
	  </UL>
	</LI>
	<LI>
	  <P>
	    We will now employ the libraries to produce a multiple
	    sequence alignment (MSA). As a proof of principle, let's
	    start by making a very <i>naive MSA</i> by exploiting the
	    information of the global library only:
	  </P>
	  <PRE>
t_coffee \
    -in Lgst_fast_pair.lib \
    -run_name global \
    -outorder input \
    -clean_aln 0 \
    -output clustalw_aln score_html
	  </PRE>
	  <P>
	    This creates two files: <tt>global.clustalw_aln</tt> that
	    contains the alignment in text format, and
	    <tt>global.score_html</tt> in html format (postscript and
	    pdf output are also available). Have a look at the
	    score_html file: The color scale denotes the consistency
	    of a residue, i.e. how well its position in the MSA is
	    supported by the supplied libraries. The color scale is
	    not related to the degree of conservation of the column in
	    the alignment. A warm color (red to orange) indicates that
	    the position of a residue in the MSA is well supported, a
	    cold color, (green to blue) indicates that the position of
	    a residue in the the MSA is poorly or not supported by the
	    library.
	  </P>
	  <P>
	    There are clearly two "redish" blocks that are visible in
	    this alignment, and which contain the few fully conserved
	    residue. In the greenish parts of the alignment appear a
	    few oddities, some regions in the middle and at the
	    C-terminus, which do not form "clean" blocks. It is
	    possible to improve the <em>appearance</em> of this MSA by
	    allowing <tt>t_coffee</tt> to rearrange the residues with
	    low consensus score, for example using
	  </P>
	  <PRE>
t_coffee \
    -in Lgst_fast_pair.lib \
    -run_name clean_global \
    -outorder input \
    -clean_aln 1 \
    -clean_threshold 2 \
    -clean_iteration 5 \
    -output clustalw_aln score_html
	  </PRE>
	  <P>
	    Compare <tt>clean_global.score_html</tt> with
	    <tt>global.score_html</tt>: Although the cleaned alignment
	    <em>looks better</em>, the displaced residues are not
	    supported anymore by the used library. This is only a
	    cosmetic change and there is no biological or scientific
	    argument to support it. Beware of nice-looking alignments!
	  </P>
	</LI>
	<LI>
	  <P>
	    This is how to mix the two libraries of global and local sequence alignments
	  </P>
	  <PRE>
t_coffee \
    -in Lgst_fast_pair.lib Lgst_lalign_id_pair.lib \
    -run_name default \
    -outorder input \
    -clean_aln 0 \
    -output clustalw_aln score_html
	  </PRE>
	  <P>
	    When compared with the previous global-only example, the
	    overall consistency slightly decreases, which is linked to
	    the fact that most alignements in the local library are
	    <em>random</em> alignents. One can also observe a few
	    differences in the alignments as compared to the previous
	    one, which could be difficult to justify/evaluate at this
	    stage.
	  </P>
	  <P>
	    This strategy of mixing the local and the global sequence
	    library is in fact the default for <tt>t_coffee</tt> on a
	    set of sequences. Indeed, the whole process of making the
	    local and global libraries and then running the above
	    command can be simply realized by the command
	  </P>
	  <PRE>
t_coffee global.clustalw_aln -outorder input -clean_aln 0
	  </PRE>
	  <P>
	    Note that <tt>global.clustalw_aln</tt> is used here
	    to supply the sequences (the gaps are ignored). Another
	    simple command yields the same result
	  </P>
	  <PRE>
t_coffee -in $TEST Mlalign_id_pair Mfast_pair -outorder input -clean_aln 0
	  </PRE>
	  <P>
	</LI>
	<LI>
	  <P>
	    So now let us build the alignment from the structural library alone
	  </P>
	  <PRE>
t_coffee \
    -in Lgst_sap_pair.lib \
    -run_name sap \
    -outorder input \
    -clean_aln 0 \
    -output clustalw_aln score_html
	  </PRE>
	  <P>
	    One can easily recognize in the <tt>sap.score_htlml</tt>
	    file, the core regions of the GSTs that were repeatedly
	    (correctly) aligned by SAP (warm colors), and the more
	    flexible loop regions where no consensus alignement emerged
	    (in blue).
	  </P>
	  <P>
	    Note that that two short but highly consistent stretches
	    at the N-terminus actually correspond to the active sites
	    of GSTs.
	  </P>
	</LI>
	<LI>
	  <P>
	    Who could now resist from building an alignment with the
	    three libraries?
	  </P>
	  <PRE>
t_coffee \
    -in Lgst_lalign_id_pair.lib Lgst_fast_pair.lib Lgst_sap_pair.lib \
    -run_name all \
    -outorder input \
    -clean_aln 0 \
    -output clustalw_aln score_html
	  </PRE>
	  <P>
	    The latter alignment ressembles to the structure-only
	    alignment. Why?
	  </P>
	  <P>
	    Apart from creating libraries and assembling them into
	    MSA, <tt>t_coffee</tt> also permits us to evaluate a MSA
	    <em>in the light of</em> another library. Let us use this
	    feature to decipher the respective contribution of the
	    sequence and structural information in the last example:
	  </P>
	    <PRE>
t_coffee all.clustalw_aln \
    -in Lgst_lalign_id_pair.lib Lgst_fast_pair.lib \
    -score \
    -quiet stdout \
    -outorder input \
    -clean_aln 0 \
    -run_name all_vs_seq \
    -output score_html

t_coffee all.clustalw_aln \
    -in Lgst_sap_pair.lib \
    -score \
    -quiet stdout \
    -outorder input \
    -clean_aln 0 \
    -run_name all_vs_struct \
    -output score_html
	  </PRE>
	  <P>
	    Compare <tt>all_vs_seq.score_html</tt> with
	    <tt>all_vs_struct.score_html</tt>.
	  </P>
	</LI>
	<LI>
	  <P>
	    In the light of the structure-based MSA, there is one
	    obvious mistake at the N-terminus of the default
	    alignement: the tyrosine 26 of the omega GST is not
	    correctly aligned, for example with the histidine 6 of the
	    sigma GST. Using your favorite text editor produce a very
	    small library (name it <tt>gst_active_site.lib</tt>) with
	    just a few pairs in order to correct this aspect of the
	    default alignement running the command
	  </P>
	  <PRE>
t_coffee \
    -in Lgst_fast_pair.lib Lgst_lalign_id_pair.lib Lgst_active_site.lib\
    -run_name test \
    -outorder input \
    -clean_aln 0 \
    -output clustalw_aln score_html
	  </PRE>
	</LI>
	<LI>
	  <P>
	    Choose three structures and produce a library using the
	    method sap_pair. Then, re-align all GSTs using the
	    complete local and local sequence libraries, and the
	    partial structural library. Do three structures suffice
	    to improve the alignment?
	  </P>
	  <P>
	  </P>
	  
	</LI>
	
      </UL>
	<HR>
	  <address><a href="mailto:Marco.Pagni@isb-sib.ch">Marco Pagni</a></address>
	  
	    Last modified: March 2002
	    </ALIGN>
    </body>
  </html>
