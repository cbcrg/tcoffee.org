ALIGN_PDB: An Algorithm for making pairwise structural alignments.

This is the documentation for align_pdb, a C program that makes a pairwise
sequence alignment of two sequences with known pdb structures. This
program is meant to be fully compatible with t_coffee. It can make global
pairwise alignments (NW), local pw aln (sw), or multiple local pw aln
(lalign).



	0-Recent modifications (28/06/00)

	1-ALGORITHM
		A-Neighbour Function
		B-Bubble Function (default)
		C-Complexity
		D-Lalign Implementation
		E-Creating your own Evaluation function

	2-align_pdb manual 
		A-Global
		B-Local (lalign3d)

	3-align_pdb distribution code and  executables
	4-interaction between T-Coffee and align_pdb
	  (i.e. how to make multiple structural aln)	
	5-extract_from_pdb
	6-Further directions	
	7-Contact
	8-known bugs
	9-Syntax rules/conventions

0-Recent Modifications

	28/06/00
		-A procedure for testing new OFs has been documented (1E)
	        -the lalign_option has been added, it is documented in 2
		2B. align_pdb, lalign.
		-The symtax proposed by Philipp is now in annex (9)
	19/04/00
		-The comparison cost function was changed (see 1-B)
		-The interaction with T-Coffee has been improved and now allows mixing sequences and structures (4).
		-This documentation is now part of the distribution ( in /doc)
	
	
1-ALGORITHM

A-Neighbour function ( Not the default anymore)

given two residue Ri of sequence 1 and Rj of sequence 2, and the distance
to their N neighbours ON THE CA CHAIN:

      d(j-1)=D(Rj, Rj-1)	d(i-1)=D(Ri, Ri-1)
      d(j-2)=D(Rj, Rj-2)...	d(i-2)=D(Ri, Ri-2)...

and on the other side

      d(j+1)=D(Rj, Rj+1)	d(j+1)=D(Ri, Ri+1)
      d(j+2)=D(Rj, Rj+2)...	d(j+2)=D(Ri, Ri+2)..
	

Note that the distance to the closest neigbhor on both side is simply
ignored.

The score for matching Rj and Ri is computed by a dynamic programing. This
lower level dynamic programming is called second dp.  It allows for cases
where d(j-3) matches d(i-4)... To force the correspondance a bit,
distances are negative ( i-n....i) or positive ( i...i+n).

The recursion is in the file evaluate_for_struc.c/ in the function
neighborhood_match(). Note that eventually, all this is not very different
from double dynamic programming, but much faster because the second DP is
only local.

The second dp maximises the sum of the (Max_delta-|delta|) delta being the
difference between two distances (i.e. delta=|d(i-2)-d(j-2)|. There is no
penalty for not matching a distance, but Max_delta is a cutoff value above
which the score for matching two distances becomes negative.

In practice it is much simpler than what I am explaining, take a look at
the code to convince yourself :-). Currently, max_delta is set to 2A and
the number of residues on both side is set to 7 (i.e. 14 residues
i-2...i-8, and i+2...i+8). The score returned that way is normalised so
that it equals 100 if the distances of Ri and Rj match perfectly (i.e. sum
of the delta equal 0)

I will be happy to provide extra documentation for the data structure if
one of you is willing to play with the code. The data for atomic
distances, atomic coordinates and so on is initialised in

	reformat_struc.c

while the data structure themselves are by the middle of util_lib_header.h


These values are then used in a standard dynamic programing procedure,
with gap open=-15 and gapext=-10.

In total there are four parameters:
	1-max_delta the threshold
	2-nca the number of neighboors
	3-gapopen
	4-gapext
They can all be modified from the command line ( see the next section).


B-Bubble Function ( Default function)

This function is similar to the previous one. Instead of taking the
CA Neighbours, the function takes into account all the CA within a given
distance ( -maximum_distance) of the CA one is interested in. The
distances are ordered according to the index of the CAs.

Two residues are compared by using the Dynamic programming procedure
discribed earlier. The result is normalized to 100 and weighted using a
pam250mt:

	score=(structure sup score)*(pam250 score)

The pam250 score is equal to:

	pam250[residue1][residue2]/MAX(pam250[R1][R1],pam250[R2][R2]

with a pam250 rescaled to positive only values.

The parameters used by this function are:
	1-max_delta the threshold
	2-maximum_distance : diameter of the bubble.	
        3-gapopen
        4-gapext 

C-Complexity:

	Time:  quadratic (product of the structure length).
	Space: Linear ( Myers and Miller)
 	

D-Lalign implementation

	The implementation of Lalign used here is very uneficient. It
computes the first best scoring local alignment, and then blanks out the
pairs of residues used that way, and goes on and on. All in all, with a
sequence of length L, extracting the N best scoring aln can be done in:

	L**2 memory
	N*(L**2) time.


E-Creating your own function
  
  	E.1-Content of the data structures.
  	E.2-Implementing your own function in pdb_align.
  	E.3-Using that function with T-Coffee (multiple Sequence Alignment).

E.1-Content of the data structures

   This file only contains a dummy function to help you create 
   your own matching potential function (Step 2 in the Notations RULES
 
   int evaluate_match_score ( Constraint_list *CL, int A, int i, int B, int j)
 
   returns a score, expected to be between -100 and 100, that corresponds to the matching of 
   A_i with B_j.

   Most needed parameters are included in the data structure CL,
   This Data Structure is declared in util_constraint_list.h
   The following, non exhaustive list explains the most common parameters

   The neighborhood is computed using:
   ((CL->T[A])->pdb_param)->maximum_distance as a radius for the Bubble
   ((CL->T[A])->pdb_param)->n_excluded_nb are excluded around the central residue
                           i.e i-1 and i+1 for n_excluded_nb=1.
			   

   ((CL->T[A])->Bubble)->nb[i][0]     --> Number of residues in the bubble around A_i
   ((CL->T[A])->Bubble)->nb[i][k]=j   --> Index of the kth residue in the bubble
                                         Residues are sorted according to the Ca chain
   ((CL->T[A])->Bubble)->d_nb[i][k]=d --> Distance between A_i and A_j equals d;
				     
   ((CL->T[A])->ca[i]->x -----------> Coordinates of the Ca A_i
   ((CL->T[A])->ca[i]->y
   ((CL->T[A])->ca[i]->z



   ((CL->T[A])->len      -----------> Length of Chain A.
   ((CL->T[A])->n_atom   -----------> n atoms in A.
  
  
   Unspecified parameters can be passed from the command line:

           align_pdb -extra_parameters=10, 10.3, 11, 12.4, my_file
	   
   The values of these parameters can be accessed in:
  
    ((CL->T[A])->pdb_param)->n_extra_param=4
    ((CL->T[A])->pdb_param)->extra_param[0]="10"
    ((CL->T[A])->pdb_param)->extra_param[1]="10.3"
    ((CL->T[A])->pdb_param)->extra_param[2]="11.6"
    ((CL->T[A])->pdb_param)->extra_param[3]="my_file"

   These parameters contain strings! To get the real values, in C, use atoi and atof:
    atoi ( ((CL->T[A])->pdb_param)->extra_param[0])=10;
    atof ( ((CL->T[A])->pdb_param)->extra_param[1])=10.3;
    
    The maximum number of parameters is currently 1000...

   

E.2-Implementing your own function

    all you need to do is to edit this file and recompile align_pdb.
    There is no need to prototype any function.

    10 functions holders exist, that correspond to the 10 dummy functions 
    declared in this file:
                  custom_pair_score_function1
		  custom_pair_score_function2
		  custom_pair_score_function3
		  custom_pair_score_function4
		  .....
		  custom_pair_score_function10
    
    Let us imagine, you want to use custom_pair_function1.
    
             1-In CUSTOM_evaluate_for_struc.c, modify custom_pair_function1,
	       so that it computes the score you need.
	
             2-If you need extra parameters, get them from ((CL->T[A])->pdb_param)->extra_param.
	     3-Recompile pdb_align:
	               -put it in your bin
		       -rehash or whatever
	       
	     4-run the program as follows:

	     align_pdb -in <struc1> <struc2> -hasch_mode=custom_pair_score_function1
	               -extra_param=10, 12, 0.4, matrix...

	     5-My advice for a first time: make a very simple dummy function that spits
	     out the content of extra_param.

	     6-Remember it is your responsability to control the number of extra parameters
	     and their proper order, and type. Do not forget to apply atoi and atof to the parameters 
	    
	     7-Remember that the modifications you made to CUSTOM_evaluate_for_sytructure
	     must be preserved by you!!! They may disappear if you update align_pdb, save them 
	     appart as your own patch.

	    
 
    
E.3-Using that function with T-Coffee (multiple Sequence Alignment).
  
  		1- setenv ALIGN_PDB_4_TCOFFEE  <your version of align_pdb>
  
  		2- run t_coffee
  	To do so, you will NOT NEED to recompile T-Coffee, simply type:
            	t_coffee -in <struc1> <struc2> ... custom1_align_pdb_pair
  
	    
  

2-align_pdb manual

A-Global alignment
	
	-in: indicate your pdb files (two max).

the sequence will be read in ATOM and the formating will be carried out by
the extract_from_pdb script. If the pdb file contqins several chains, only
the first will be considered. It is your responsability to prepare the pdb
file.
	
	-gapopen   default=-15 (maximum match score=100)
	-gapext    default=-10 
	-max_delta default=2
	-nca	   default=8   (number of neighboors considered)
	-maximum_distance=10
	-hasch_mode  default=hasch_ca_trace_bubble (function  A)
		             hasch_ca_trace_nb ( use function B)
	
	Indicates the function used for evaluating the cost of matching
two residues.


	-output    
indicate the output format, all the formats supported by t_coffee are
valid (including score_ps). See t_coffee documentation. align_pdb is a
format where super-imposed residues are in upper case, and non
super-imposed in lower case.

	-output=pdb_constraint_lib is the option used to communicate with
t_coffee, where instead of one alignment, align_pdb outputs a list of
pairwise constraints with their associated score. It is that list of
weighted constraints that is used by T-Coffee.


B-Local Alignment (Lalign and SW)

	To generate local alignments:

	-dp_mode=gotoh_pair_wise_sw (sw)
	        =gotoh_pair_wise_lalign ( lalign)
	        =lalign (lalign)

	-lalign_n_top=10      (number of aln to be reported)
	-output=lalign_aln (output similar to lalign)
	-sw_min_dist =10   (minimum distance between two matched
			       residues,when self-comparing only).
	
	
	Crude tunning indicates the following parameters to better:

		-scale=50
		-gapext=-20


	for instance:

	align_pdb -in x.pdb -dp_mode lalign -scale=40 -gapext=-20	
	-output lalign_aln 

	will produce the 10 top scoring local aln of n, with itself.
	This output will be in a format similar to lalign.

	
		
3-align_pdb distribution code and executables

	distribution:
	/home/cnotreda/packages/ALIGN_PDB_distribution_Version_0.1	
	
	executable: installed on isrec-sun1

	to run align_pdb, you also need extract_from_pdb, a Perl script that is  
	that is installed on all the machines.


4-interaction between T-Coffee and align_pdb

	t_coffee can also be run along with align_pdb. Indicate your pdb files as
	sequence files and require as a method align_pdb_pair. For instance:

		t_coffee pdb_file1 pdb_file2 pdb_file3 -in align_pdb_pair

	will produce a multiple sequence alignment of the three sequences
	considered, using the pdb_align algorithm. 

	You can mix structures and sequences:
		structure Vs structure   -> align_pd_pair
		structure Vs seq	 -> lalign_id_pair+fasta_pair
		seq       Vs seq	 -> lalign_id_pair+fasta_pair

	align_pdb_pair, can be replaced with sap_pair, another algorithm for
	aligning structures that is more accurate but more expensive time and
	memory-wise:
		t_coffee pdb_file1 pdb_file2 pdb_file3 -in sap_pair
		
 	
	
5-Extract from pdb
	extract_from_pdb is a script that allows the extraction of chains or
	sub-chains from a pdb file. Type:
		extract_from_pdb -h
	for further information

	If the script does not work properly, do not forget to change its
	first line ( the one that indicates the localtion of Perl).
	
6-Further developements

	We may need a way to systematically evaluate the quality of our
	alignments. Balibase would be a solution, or the Compass database.

	In terms of algorithms:

		1-implement a better cost function for the cost of matching
		two residues.

		2-implement a Smith and Waterman, or Lalign algorithm in the
		higher step of the double DP. This will also be useful for extracting
		multiply occuring domains.

		3-implement a function similar to the mocca option in
		T-Coffee.
		
		4-Reformulation of the OF, so that weighting scheme can be
		created using Linear discrimination



7-Contact
	*******************************************
	Dr. Cedric Notredame, PhD.                        
	Structural and Genetic Information
	C.N.R.S UMR 1889
	31 Chemin Joseph Aiguier,
	13402 Marseille Cedex 20,
	France

	Email   :  cedric.notredame@gmail.com
	WWW     :  http://igs-server.cnrs-mrs.fr/~cnotred/
	Tel.    :  +33 491 164 606
	Tel mob :  +33 661 312 531
	Fax     :  +33 491 164 549
	*******************************************

8-known buggs
	-myers_miller_pair_wise (dp_mode) is bugged, avoid using it until
	fixed.
	
9-Syntax rules (Philipp Bucher)

     First, let us summarize the align pdb algorithm in plain 
     english: 

     Given are two protein structures A and B.

        Step 1: For each residue in each structure extract 
           the local structural neighbourhood. A neighbourhood
           is simply a subset of (usually non-consecutive)
           residues from one of the structures. 

        Step 2: For all possible pairs of residues between structures 
           A and B, compute the optimal neighbourhood alignment 
           score. This score, which is also referred to as 
           local neighbourhood similarity (LNS) score indicates
           whether two residues have similar local stuctural
           environemnts.

        Step 3: Generate one (or multiple) optimal structural alignment(s)
           for A and B based on LNS scores plus some gap penalty
           function. 

     Now, some rules for ascii/email notation:

      - Whenever possible use a style which fits on one line (because it 
        is painful to modify formulas that span over several lines). Example: 

        Use: ( a**2 + b**2 )**0.5  
                      ________
                     |  2    2
        instead of: \| a  + b

        Introduce local variables/functions to split long expressions over 
        several lines, e.g. 

        Score = Sum(0<i<I+1) Match(A_i,B_i) where 

                Match(A,B) = ..

      - Pseudosubscript notation for (multiply) indexed variables: 

        A_i A_j_i

        As a general rule, I propose that we always use lower case 
        letters for indices, and that the corresponding upper case letters
        denote the number of indexed objects. 

     Index usage conventions: I propose that we use different indices 
     for different objects: 

        i  a residue of structure A 
        j  a residue of structure B
        k  a residue of a neighbourhood of structure A 
        l  a residue of a neighbourhood of structure B
        m  a residue pair of a neignourhood alignment 
        n  a residue pair of a structure alignment 
     
     Some examples, extensions, and additional conventions: 
     
        I      # of residues in structure A 
        K_i    # of residues of the neighbourhood of residue i of  structure A
        A_k(i) # the kth residue of neighbourhood i. 
        M_i,j  # of residue pairs of an alignment of the neighbourhoods of
               residues i and j. 

     The pseudosubscript notation may not always be optimal in terms clarity. 
     We may occasionally use parenthesis, comma-separated susbscripts, etc.
     instead, e.g. M(i,j) or M_ij. 

     The residues of the structures will be denoted: 

        A_1, A_2 ... A_I
        B_1, B_2 ... B_J
   
     This is for expressing general concepts only. It is of little practical
     importance for the moment since we do not use all residue-related 
     structural information from pdb. Instead we use the C-alpha coordinates 

        C_1, C_2 ... C_I  (for protein C)
        D_1, D_2 ... D_J  (for protein B)

     for all compututations. The D_1 ...  is admittedly not very intuitive
     and I'm open for other suggestions. For the scalar components of the
     C-alpha coordinates I propose that we use 

        C_1 = CX_1, CY_1, CZ_1 = (for example) 7.51, 1.24, 3.01

     For the distance between two C-alpha atoms we write 

        |C_1-C_2| 

     which equals 

        [ (CX_1-CX_2)**2 + (CY_1-CY_2)**2 + (CZ_1-CZ_2)**2 ]**0.5
   
     if I remember correctly from high school.

     Back to the algorithm: 

     > Step 1: For each residue in each structure, extract 
     >         the local structural neighbourhood. A neighbourhood
     >         is simply a subset of (usually non-consecutive)
     >         residues from the same structure. 

     The result is something like: 

       P(i) = P_1(i) .. P_k(i) .. P_K_i(i)  
       Q(i) = Q_1(j) .. Q_l(j) .. Q_L_j(j)  

     These are all ordered integer arrays. The P's and Q's indicate
     residue positions in sequence space. For the C-alpha coordinates,
     we use: 

       C(i) = C_1(i) .. C_k(i) .. C_K_i(i)
       D(i) = D_1(j) .. D_l(j) .. D_L_i(j)

     > Step 2: For all possible pairs of residues between structures 
     >         A and B, compute the optimal neighbourhood alignment 
     >         score. This score, which is also referred to as 
     >         local neighbourhood similarity (NSL) score indicates
     >         whether two residues have similar local stuctural
     >         environemnts.

     We have to define a similarity score: 

       S(i,j) = function[A,B,P(i),Q(j)]

     More specifically, S(i,j) is the score of an opimal alignment between 
     two subsets of C-alpha coordinates from A and B, defined by P(i) and Q(j).
     We use the following notation for an alignment between two neighbourhoods. 

       R = (k_1,l_1) .. (k_m,l_m) .. (k_M, l_M) 

     This is pretty abstract and requires some explanation.

     The alignment consists of M pairs of residues from two neighbourhoods. 
     The paired residues are numbered 1,2...K and 1,2...L, respectively. 
     Obviously M <= K,L. For K=9 and L=7, a possible alignment would
     look as follows: 

       R = (1,2) , (2,3) , (5,4) , (6,5) , (9,7) 
     
     This alignment consists of five paired residues, the first
     residue of neighbourhood P(i) is aligned with with the second residue
     of Q(j), etc.  

     The score of an alignment Z(R) is a function that can be
     defined in many different ways. But independently of its 
     definition: 

        S(i,j) = Z(R*,A,B,P(i),Q(j))
        R* = argmax Z(R,A,B,P(i),Q(j))

     This is just a complicated way of saying that the LNS score
     S(i,j) is an optimal alignment score. A simple alignment
     scoring function would be: 

        Z = Sum(m=1..M) [ 2 - |C_(k_m) - D_l_m)| ] 

     A more complex function could be the sum of the sums of "pair-weights",
     "pair-connection-weights", and unpaired-residue-weights": 

        Z =   Sum(m=1 .. M)  [ PW (i,P_k_m,Q_l_m,C_k_m, D_l_m) ]
            + Sum(m=2 .. M ) [ PCW(j,P_k_m,P_l_m,Q_k_m-1,Q_l_m-1,C_k_m,D_l_m,C_k_m-1,D_j_m-1 ]
            + Sum(over k for all C_i(k) unpaired) UPRW [P_k, C_k ]
            + Sum(over l for all C_i(l) unpaired) UPRW [Q_l, D_l)) ]

     Here, the terms P_k_m ... denote sequence positions, the terms C_k_m ...
     denote coordinates. i and j, the sequence position of the center residues
     of the neighbourhoods under consideration) are included in the argument
     lists of the functions because they are necessary to decide whether
     a residue A_k_m occurs before or after the residue A_i in sequence space.
     We don not want to align a residue A_k_m that occurs before A_i with
     a residue B_j_l that occurs after B_j and vice-versa.
     
     The LNS score could also be defined by a recursive equation system 
     defining a dynamic programming algorithm. However, I find the 
     above formulation more helpful for designing appropriate alignment 
     scoring functions. 

     >       Step 3: Generate one (or multiple) optimal structural alignment(s)r
     >          for A and B based on NLS scores plus some gap penalty
     >          function. 

     This is now pretty simple. We use essentially the same notation as 
     for the neighbourhood alignments. 

       R = (i_1,j_1) .. (i_n,j_n) .. (i_N, j_N) 
     
       X* = X(R*,A,B)
       R* = argmax X(R,A,B)

     The alignment scoring functing X is the sum of the LNS scores 
     of the pairs minus some gap penalties.  
    

